# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import pickle
import uuid
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QFileDialog
from collections import defaultdict
import re, os
import subprocess
import sys
from os import path
from alig.convert_pp_to_txt import convert_pp_to_txt

from main import batchstart
from main import batchend



class FileNotFoundException(Exception):
    pass


class FirstCalculationThread(QThread):
    calculation_finished = pyqtSignal(str)  # Signal to be emitted when calculation is finished

    def __init__(self, dirs, noise,objectkernel,deformkernel,numref,parent=None):
        super().__init__(parent)
        self.dirs = dirs
        self.noise = noise
        self.objectkernel = objectkernel
        self.deformkernel = deformkernel
        self.numref = numref

    def run(self):
        # Run your intensive calculation here
        p = batchstart(self.dirs,self.noise,self.objectkernel,self.deformkernel,self.numref)
        # After the calculation, emit the finished signal
        self.calculation_finished.emit(p)
        

class SecondCalculationThread(QThread):
    calculation_finished = pyqtSignal(str)  # Signal to be emitted when calculation is finished
    
    def __init__(self, dzipfile, refnum,parent=None):
        super().__init__(parent)
        self.dzipfile = dzipfile
        self.refnum = refnum
    
    def run(self):
        # Run your intensive calculation here
        p = batchend(self.dzipfile,self.refnum)
        # After the calculation, emit the finished signal
        self.calculation_finished.emit(p)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.dirs = []
        self.zipdir = ""
        self.refnum = []
        self.dzipfile = ""
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../Téléchargements/tooth2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(733, 728)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(530, 0, 191, 181))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.noise = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget)
        self.noise.setSingleStep(0.01)
        self.noise.setProperty("value", 0.1)
        self.noise.setObjectName("noise")
        self.verticalLayout.addWidget(self.noise)
        self.objectkernel = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget)
        self.objectkernel.setSingleStep(0.1)
        self.objectkernel.setProperty("value", 1.0)
        self.objectkernel.setObjectName("objectkernel")
        self.verticalLayout.addWidget(self.objectkernel)
        self.deformkernel = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget)
        self.deformkernel.setSingleStep(0.1)
        self.deformkernel.setProperty("value", 1.0)
        self.deformkernel.setObjectName("deformkernel")
        self.verticalLayout.addWidget(self.deformkernel)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(470, 30, 41, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(470, 70, 51, 51))
        self.label_2.setWordWrap(True)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(440, 120, 91, 61))
        self.label_3.setWordWrap(True)
        self.label_3.setObjectName("label_3")
        self.aligtab = QtWidgets.QWidget()
        self.aligtab.setObjectName("aligtab")
        self.cuttab = QtWidgets.QWidget()
        self.cuttab.setObjectName("cuttab")
        self.label_9 = QtWidgets.QLabel(self.cuttab)
        self.label_9.setGeometry(QtCore.QRect(10, 0, 151, 21))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.cuttab)
        self.label_10.setGeometry(QtCore.QRect(210, 10, 71, 16))
        self.label_10.setObjectName("label_10")
        self.autocutselect = QtWidgets.QPushButton(self.cuttab)
        self.autocutselect.setGeometry(QtCore.QRect(40, 30, 141, 51))
        self.autocutselect.setObjectName("autocutselect")
        self.selectiontype2 = QtWidgets.QComboBox(self.cuttab)
        self.selectiontype2.setGeometry(QtCore.QRect(210, 30, 81, 51))
        self.selectiontype2.setObjectName("selectiontype2")
        self.selectiontype2.addItem("")
        self.selectiontype2.addItem("")
        self.startautocut = QtWidgets.QPushButton(self.cuttab)
        self.startautocut.setGeometry(QtCore.QRect(20, 130, 191, 31))
        self.startautocut.setObjectName("startautocut")
        self.opencutdir = QtWidgets.QPushButton(self.cuttab)
        self.opencutdir.setEnabled(False)
        self.opencutdir.setGeometry(QtCore.QRect(230, 120, 81, 51))
        self.opencutdir.setFlat(False)
        self.opencutdir.setObjectName("opencutdir")
        self.thenalign = QtWidgets.QCheckBox(self.cuttab)
        self.thenalign.setGeometry(QtCore.QRect(10, 100, 91, 21))
        self.thenalign.setCheckable(True)
        self.thenalign.setChecked(True)
        self.thenalign.setObjectName("thenalign")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 0, 371, 261))
        self.tabWidget.setObjectName("tabWidget")
        self.tabWidget.addTab(self.cuttab, "")
        self.supteethN = QtWidgets.QSpinBox(self.centralwidget)
        self.supteethN.setGeometry(QtCore.QRect(570, 230, 101, 24))
        self.supteethN.setProperty("value", 10)
        self.supteethN.setObjectName("supteethN")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(440, 220, 111, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setTextFormat(QtCore.Qt.AutoText)
        self.label_11.setScaledContents(False)
        self.label_11.setObjectName("label_11")
        self.alignementselec = QtWidgets.QPushButton(self.aligtab)
        self.alignementselec.setGeometry(QtCore.QRect(10, 20, 141, 51))
        self.alignementselec.setObjectName("alignementselec")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(10, 260, 721, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(380, 0, 20, 251))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_4 = QtWidgets.QLabel(self.aligtab)
        self.label_4.setGeometry(QtCore.QRect(10, 0, 151, 21))
        self.label_4.setObjectName("label_4")
        self.selectiontype = QtWidgets.QComboBox(self.aligtab)
        self.selectiontype.setGeometry(QtCore.QRect(180, 30, 81, 41))
        self.selectiontype.setObjectName("selectiontype")
        self.selectiontype.addItem("")
        self.selectiontype.addItem("")
        self.clearbox = QtWidgets.QCheckBox(self.aligtab)
        self.clearbox.setGeometry(QtCore.QRect(20, 80, 101, 31))
        self.clearbox.setCheckable(True)
        self.clearbox.setChecked(False)
        self.clearbox.setObjectName("clearbox")
        self.writeply = QtWidgets.QCheckBox(self.aligtab)
        self.writeply.setGeometry(QtCore.QRect(20, 110, 111, 41))
        self.writeply.setCheckable(False)
        self.writeply.setChecked(False)
        self.writeply.setObjectName("writeply")
        self.start1 = QtWidgets.QPushButton(self.aligtab)
        self.start1.setGeometry(QtCore.QRect(10, 150, 241, 71))
        self.start1.setObjectName("start1")
        self.start1.setEnabled(False)
        self.refsurfselect = QtWidgets.QSpinBox(self.centralwidget)
        self.refsurfselect.setGeometry(QtCore.QRect(570, 200, 101, 24))
        self.refsurfselect.setProperty("value", 1)
        self.refsurfselect.setObjectName("refsurfselect")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(440, 200, 131, 21))
        self.label_5.setObjectName("label_5")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(190, 510, 351, 41))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(70, 290, 81, 16))
        self.label_6.setObjectName("label_6")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(0, 560, 731, 121))
        self.listWidget.setObjectName("listWidget")
        self.resSelect = QtWidgets.QPushButton(self.centralwidget)
        self.resSelect.setGeometry(QtCore.QRect(40, 310, 141, 51))
        self.resSelect.setObjectName("resSelect")
        self.start2 = QtWidgets.QPushButton(self.centralwidget)
        self.start2.setGeometry(QtCore.QRect(40, 370, 141, 41))
        self.start2.setObjectName("start2")
        self.openzipdir = QtWidgets.QPushButton(self.aligtab)
        self.openzipdir.setEnabled(False)
        self.openzipdir.setGeometry(QtCore.QRect(270, 150, 81, 71))
        self.openzipdir.setFlat(False)
        self.openzipdir.setObjectName("openzipdir")
        self.openzipdir.clicked.connect(self.open_file_explorer)
        self.label_7 = QtWidgets.QLabel(self.aligtab)
        self.label_7.setGeometry(QtCore.QRect(180, 10, 71, 16))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.aligtab)
        self.label_8.setGeometry(QtCore.QRect(270, 10, 81, 16))
        self.label_8.setObjectName("label_8")
        self.zipacces = QtWidgets.QLabel(self.centralwidget)
        self.zipacces.setGeometry(QtCore.QRect(0, 480, 731, 31))
        self.zipacces.setText("")
        self.zipacces.setObjectName("zipacces")
        self.decouptype = QtWidgets.QComboBox(self.aligtab)
        self.decouptype.setGeometry(QtCore.QRect(270, 30, 81, 41))
        self.decouptype.setObjectName("decouptype")
        self.decouptype.addItem("")
        self.tabWidget.addTab(self.aligtab, "")
        self.tabWidget.addTab(self.cuttab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 733, 20))
        self.menubar.setObjectName("menubar")
        self.fileMenu = self.menubar.addMenu("Fichier")
        
        saveAction = QtWidgets.QAction('Sauvegarder', MainWindow)
        saveAction.setShortcut(QtGui.QKeySequence.Save)
        saveAction.triggered.connect(self.save)
        
        openAction = QtWidgets.QAction('Ouvrir', MainWindow)
        openAction.setShortcut(QtGui.QKeySequence.Open)
        openAction.triggered.connect(self.charge)

        self.fileMenu.addAction(saveAction)
        self.fileMenu.addAction(openAction)
        
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.selectiontype.currentIndexChanged.connect(self.selectiontypechanged)
        self.decouptype.currentIndexChanged.connect(self.decouptypechanged) 
        self.alignementselec.clicked.connect(self.select_alig)
        self.resSelect.clicked.connect(self.select_res)
        self.start2.clicked.connect(self.start_res)
        self.start2.setEnabled(False)
        self.start1.clicked.connect(self.start_alig)
        self.clearbox.stateChanged.connect(self.updatewply)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.tabWidget.setCurrentIndex(1)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Notation Dent"))
        self.label.setText(_translate("MainWindow", "noise"))
        self.label_2.setText(_translate("MainWindow", "object kernel width"))
        self.label_3.setText(_translate("MainWindow", "deformation kernel width"))
        self.alignementselec.setText(_translate("MainWindow", "Selectionner"))
        self.label_4.setText(_translate("MainWindow", "Alignement"))
        self.selectiontype.setItemText(0, _translate("MainWindow", "manuel"))
        self.selectiontype.setItemText(1, _translate("MainWindow", "auto"))
        self.writeply.setText(_translate("MainWindow", "ecrire les .ply"))
        self.start1.setText(_translate("MainWindow", "Lancer"))
        self.label_5.setText(_translate("MainWindow", "Surface réference"))
        self.label_6.setText(_translate("MainWindow", "Postprocess"))
        self.resSelect.setText(_translate("MainWindow", "Selectionner"))
        self.start2.setText(_translate("MainWindow", "Lancer"))
        self.openzipdir.setText(_translate("MainWindow", "Open File"))
        self.label_7.setText(_translate("MainWindow", "Selection"))
        self.label_8.setText(_translate("MainWindow", "Decoupage"))
        self.decouptype.setItemText(0, _translate("MainWindow", "manuel"))
        self.clearbox.setText(_translate("MainWindow", "clear"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.aligtab), _translate("MainWindow", "Alignement"))
        self.label_9.setText(_translate("MainWindow", "Autocut"))
        self.label_10.setText(_translate("MainWindow", "Selection"))
        self.autocutselect.setText(_translate("MainWindow", "Selectionner"))
        self.selectiontype2.setItemText(0, _translate("MainWindow", "manuel"))
        self.selectiontype2.setItemText(1, _translate("MainWindow", "auto"))
        self.startautocut.setText(_translate("MainWindow", "Lancer"))
        self.opencutdir.setText(_translate("MainWindow", "Open File"))
        self.thenalign.setText(_translate("MainWindow", "aligner"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.cuttab), _translate("MainWindow", "Autocut"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p>Nombre de dent <br/>par support</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.cuttab), _translate("MainWindow", "Autocut"))
      
    def updatewply(self):
        if self.clearbox.isChecked():
            self.writeply.setCheckable(True)
        else:
            self.writeply.setCheckable(False)
        
    def selectiontypechanged(self):
        self.resetstart1()
    
    def decouptypechanged(self):
        self.resetstart1()
    
    def resetstart1(self):
        self.dirs = []
        self.refnum = []
        self.zipdir = ""
        self.start1.setEnabled(False)
        self.openzipdir.setEnabled(False)
        
    def select_res(self):
        self.dzipfile, _ = QFileDialog.getOpenFileName(
            None, "Select the archive", "~/", "Zip Archive (*.zip)"
        )
        if self.dzipfile is not None and (self.dzipfile and len(self.dirs) > 0):
            self.start2.setEnabled(True)
        else:
            self.start2.setEnabled(False)
            print(self.dzipfile)
            print("Pas de fichier sélectionné")
        
    def start_res(self):
        if hasattr(self, 'second_calculation_thread') and self.second_calculation_thread.isRunning():
            # Optionally, handle the case where the thread is already running
            print("Déjà en cours")
            return
        self.second_calculation_thread = SecondCalculationThread(self.dzipfile,self.refnum)
        self.second_calculation_thread.calculation_finished.connect(self.on_second_calculation_finished)
        self.second_calculation_thread.start()
    
    
    def start_alig(self):
        if hasattr(self, 'calculation_thread') and self.calculation_thread.isRunning():
            # Optionally, handle the case where the thread is already running
            print("Déjà en cours")
            return
        self.calculation_thread = FirstCalculationThread(self.dirs,self.noise.value(),self.objectkernel.value(),self.deformkernel.value(),self.refnum)
        self.calculation_thread.calculation_finished.connect(self.on_calculation_finished)
        self.calculation_thread.start()

    def on_calculation_finished(self,path):
        self.zipdir = path
        self.openzipdir.setEnabled(True)
        self.zipacces.setText("Accès à l'archive : " + path)
        # Update the UI with the results of the calculation
        
    def on_second_calculation_finished(self,path):
        pass
    
    def select_alig(self):
        if self.selectiontype.currentText() == "manuel":
            self.manu_user_select_files()
        if self.selectiontype.currentText() == "auto":
            self.auto_user_select_files()
        self.on_file_selected()

    def on_file_selected(self):
        if self.dirs is not None and (self.dirs and len(self.dirs) > 0):
            print(self.dirs)
            self.start1.setEnabled(True)
        else :
            self.start1.setEnabled(False)
            print(self.dirs)
            print("Pas de fichier sélectionné")

    
    def user_select_files(self):
        pointsFile, _ = QFileDialog.getOpenFileName(
            None, "Select the txt file containing points", "~/", "Text Files (*.txt)"
        )
        if not pointsFile:
            raise FileNotFoundException("No points file selected")
        
        surfaceFile, _ = QFileDialog.getOpenFileName(
            None, "Select the surface", path.dirname(pointsFile), "PLY Files (*.ply)"
        )
        
        if not surfaceFile:
            raise FileNotFoundException("No surface file selected")

        surfaceFileCut, _ = QFileDialog.getOpenFileName(
            None, "Select the cut surfaces", path.dirname(pointsFile), "PLY Files (*.ply)"
        )
        
        if not surfaceFileCut:
            raise FileNotFoundException("No surface cut file selected")

        return pointsFile, surfaceFile, surfaceFileCut

    def update_list(self,pointFile,surfaceFile,surfaceFileCut):
        self.listWidget.addItems(["POINT FILE : " + str(pointFile) + " SURFACE FILE : "+ str(surfaceFile) + " SURFACE FILE CUT : "+ str(surfaceFileCut)])

    def manu_user_select_files(self):
        try:
            pointsFile, surfaceFile, surfaceFileCut = self.user_select_files()
            self.dirs.append((pointsFile, surfaceFile, surfaceFileCut))
            self.refnum.append(self.refsurfselect.value())
            self.update_list(pointsFile,surfaceFile,surfaceFileCut)
        except FileNotFoundException as e:
            print(e)

    def auto_user_select_files(self):
        root_directory = QFileDialog.getExistingDirectory(
            None, "Please select a directory containing your files", "~/"
        )

        if root_directory:
                # Recueillir tous les fichiers
            all_files = [f for f in os.listdir(root_directory) if f.endswith(".ply") or f.endswith(".txt")]

            # Crée un dictionnaire avec une liste vide comme valeur par défaut pour chaque clé
            files_by_prefix = defaultdict(list)

            # Identifier les fichiers .ply qui ne contiennent pas "cut" dans leur nom comme préfixes
            for filename in all_files:
                if filename.endswith(".ply") and "cut" not in filename:
                    prefix = re.split('\.ply', filename)[0]
                    files_by_prefix[prefix].append(os.path.join(root_directory, filename))

            # Chercher les autres fichiers correspondant à ces préfixes
            for filename in all_files:
                if filename.endswith(".txt") or "cut" in filename:
                    for prefix in files_by_prefix.keys():
                        if filename.startswith(prefix):
                            files_by_prefix[prefix].append(os.path.join(root_directory, filename))
                            break
                elif filename.endswith(".pp"):
                    for prefix in files_by_prefix.keys():
                        if filename.startswith(prefix):
                            # Vérifier si le fichier .txt correspondant existe déjà
                            txt_file = os.path.join(root_directory, f"{prefix}.txt")
                            if txt_file not in files_by_prefix[prefix]:
                                input_file = os.path.join(root_directory, filename)
                                output_file = txt_file
                                convert_pp_to_txt(input_file, output_file)
                                files_by_prefix[prefix].append(output_file)
                            break

            triplets = []
            for prefix, files in files_by_prefix.items():
                if len(files) == 3:
                    # Trie les fichiers pour toujours avoir l'ordre suivant : .txt, .ply, _cut.ply
                    files.sort(key=lambda x: (not x.endswith(".txt"), not x.endswith(".ply"), "cut" in x))
                    triplets.append(tuple(files))
                    self.update_list(files[0],files[1],files[2])

            self.dirs = triplets
            self.refnum = [self.refsurfselect.value()]*len(self.dirs)
        else:
            print("Aucun dossier sélectionné")
    
    def open_file_explorer(self):
        print("open : " + self.zipdir)
        print("platform : " + sys.platform)
        if os.name == 'nt':  # Pour Windows
            subprocess.Popen(['explorer', self.zipdir])
        elif os.name == 'posix':  # Pour macOS
            subprocess.Popen(['open', self.zipdir])
        else:
            print("OS non supporté")
    
    def save(self):
        
        filenameprop = f'save_{str(uuid.uuid4())[:8]}.pkl'
        
        options = QFileDialog.Options()
        #options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getSaveFileName(None,"Enregistrer la sauvegarde",filenameprop,"Pickle Files (*.pkl)", options=options)
         
        if filename:
            with open(filename, 'wb') as f:
                pickle.dump({'refnum': self.refnum, 'dirs': self.dirs}, f) 
    
    def charge(self):
        fname = QFileDialog.getOpenFileName(None, 'Ouvrir fichier', '/', "Pickle files (*.pkl)")

        if fname[0]:
            with open(fname[0], 'rb') as f:
                data = pickle.load(f)
            self.refnum = data['refnum']
            self.dirs = data['dirs']
            self.update_ui()
            
    def update_ui(self):
        self.listWidget.clear()
        for i in range(len(self.dirs)):
            self.update_list(self.dirs[i][0],self.dirs[i][1],self.dirs[i][2])
        if self.refnum is not None and (self.refnum and len(self.refnum) > 0):
            self.refsurfselect.setValue(self.refnum[0])
        self.on_file_selected()
        #self.openzipdir.setEnabled(True)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
